<?php  

/* 
 * the main menu for Hip Chat archive
 * hook_menu
 */
function hipchat_archive_menu() {
  $items = array();

  $items['hipchat-archive/%/%'] = array(
    'title' => 'Hip chat Archive',
    'description' => 'displays archives of Hip chat',
    'page callback' => '_hipchat_archive_get_data',
    'access callback' => TRUE,
    'page arguments' => array(1,2),
    'title' => 'Archives',
  );

  return $items;
}

/**
 * _hipchat_load_includes
 * loads all the necessary files 
 * like dbfunctions.inc and hipchat_arcive.css
 */
function _hipchat_load_includes(){
    module_load_include('inc', 'hipchat_archive', 'hipchat_archive.dbfunctions');
    module_load_include('css', 'hipchat_archive', 'hipchat_archive');
}

function _hipchat_archive_setvariables(){
   return $var[] = array(
    'link'=> 'https://api.hipchat.com/v1/rooms/history?room_id=',
    'authToken' => '&auth_token='.variable_get('chat_room_token'),
    'timeZone' => 'America/New_York',
    'format' => 'json'
   );
}

/**
 * _hipchat_archive_get_data
 * parameter = $date , $room_id
 * if no parameter is given, the default would be today and the room_id
 * would be the default
 * The date of the format(yyyy-mm-dd)and the room_id, is sent to the apichat
 * service. Chat history retrieved for that date and that room
 */
function _hipchat_archive_get_data($date = NULL,$url_room_id=Null){  
  //load the included files
  _hipchat_load_includes();
  
  //variable declaration
   $variables = _hipchat_archive_setvariables();
   $currDate = date('Y-m-d');
   $formattedData ='';
   $prevDate = date('Y-m-d', strtotime($currDate .' -1 day'));
      

   //check room_id if null or not an int. If not an int
   //use default room_id else use the sent room_id
   if ($url_room_id == Null || (intval($url_room_id) === 0)){
      $room_id = variable_get('chat_room_id');
      if (intval($url_room_id) === 0){
            drupal_set_message(t('Room id must be an integer'), 'error');
      }
    } else {
      $room_id = $url_room_id;
    }
    //check date 
    //if the date clicked is either null or today's date
    //make the current date as today with next day as null
    //else the date clicked can only be less than the current date
    if (strtotime($date) && ($date == Null || $date >= $currDate)){
      if ($date > $currDate) {
         drupal_get_messages();
         drupal_set_message(t('No data available for this day'));
         }
         $date = $date;
         $nextDate = '';
         $prevDate = date('Y-m-d', strtotime($date .' -1 day')); 
       } else {
          $nextDate = date('Y-m-d', strtotime($date .' +1 day'));
             }
 
     
     //get history from api.hipchat.com for the parameters
    try {
         //get data from db for the selected date
         $dataDb = hipchat_select_data_id($date);
        //get time diff between now and the time the data was entered
        //in the db from webservice
         $timeDiff = _hipchat_archive_gettimedifference($date);
         //calculate the hour 
         $hour  = $timeDiff/3600 ;

         //the data will come from the webservice under these following conditions:
         //a)the date is today and (either the time difference is greater than 1
         //or the data is not in the db
         //b)date is not today and data is not in db
         //the data will come from the db if the above conditions fail
         if ((($date === $currDate) && (($dataDb && ($hour >= 1)) || !$dataDb))
              || (($date !== $currDate) && !$dataDb)){
                $dataDb = _hipchat_archive_getdatawebservice($variables['link'],$room_id,$date,
                                                             $variables['timeZone'],$variables['format'],$variables['authToken']);
                $formattedData = _hipchat_archive_checkwebdata($currDate,$dataDb,$date,$nextDate,$room_id,$prevDate,True);
              } else {
                 $formattedData = _hipchat_archive_format_data($date,$nextDate,$dataDb,$room_id,$prevDate); 
           }
       }
    catch(Exception $e){
       drupal_set_message(t('Issue in retrieving the data. Message = %message, query=%query', 
       array('%message' =>$e->getMessage(),'%query' => $e->query_string)), 'error');
     } 
 
     //return the formatted data
     return $formattedData ; 
}

/**
 * _hipchat_archive_cron
 * saves the data for yesterday in the db 
 */
function _hipchat_archive_cron(){
   //get previous date
   $prevDate = date('Y-m-d', strtotime('- 1 day'));
   //get the variables like link, format etc
   $variables = _hipchat_archive_setvariables();
   //get room_id
   $room_id = variable_get('chat_room_id');
   
   //get data from webservice
   $prevDayData = getDataFromWebService($variables['link'],$room_id,$prevDate,$variables['timeZone'],$variables['format'],$variables['authToken']);
   $chatData = (array)$prevDayData[0]['chatdata'];
   if ($prevDayData[0]['value'] === 'messages'){
         $prevDayDataValue = drupal_json_decode($chatData['data']);
         $saveChatData[] = array('cdate' => $prevDate,'cdata' => $prevDayDataValue);
         //save to the db
         $saved = hipchat_save_data($saveChatData); 
      }
 }
 
/**
 * _hipchat_archive_gettimedifference
 * parameters = $date
 * $date is sent to the db for retrieving time for the 
 * selected date
 * returns time difference between the time the data
 * was entered in the db and now
 */
function _hipchat_archive_gettimedifference($date){
  //get the time when data was entered into the db
  $origTime = hipchat_select_time_fordate($date);
  $convertedTime = strtotime($origTime['ctime']);
  
  //return the difference
  return(time() - $convertedTime);
}

/**
 * _hipchat_archive_checkwebdata
 * parameters = $dataDb,$date,$nextDate,$room_id,$prevDate,$update
 * $update, by default, is null. It receives a boolean value
 * when update is true
 * $dataDb = the data coming from the webservice
 * $room_id = the room for which to get data from 
 * $date = the date which is the key in the hipchat_archive table
 * $nextDate = the date of tomorrow
 * $prevDate = yesterday's date
 * checks if the webservice returns data or error 
 * error condition: the room may not have been created etc
 * returns formatted data
 */                                       
function _hipchat_archive_checkwebdata($currDate,$dataDb,$date,$nextDate,$room_id,$prevDate,$update=NULL) {
   $chatData = (array)$dataDb[0]['chatdata'];
   $saveChatData = array();
   //retrieve the value for key 'messages', if 'error' then return error message else return data
   if ($dataDb[0]['value'] === 'messages'){
      $chatDataValue = drupal_json_decode($chatData['data']);
      $saveChatData[] = array('cdate' => $date,'cdata' => $chatDataValue);
      if ($update){
          _hipchat_archive_update_data($date,$saveChatData);
      } else {
           _hipchat_archive_save_data($saveChatData);
            }
      $formattedData = _hipchat_archive_format_data($date,$nextDate,$saveChatData[0],$room_id,$prevDate);
    } else {
        drupal_get_messages();
        drupal_set_message('No data available for this day');
        $date = $date;
        $nextDate = $nextDate;
        $prevDate = date('Y-m-d', strtotime($date .' -1 day'));
  

  $formattedData = _hipchat_archive_format_data($date,$nextDate,$saveChatData,$room_id,$prevDate);
      }

    return $formattedData;
}
 

/**
 * _hipchat_archive_getdatawebservice
 * parameters = $link, $room_id,$date,$time_zone,$format,$authToken
 * $link = url to connect
 * $room_id = the room for which to get data from 
 * $date = the date for which to get data 
 * $time_zone = require the time zone for eg America/New York
 * $authToken = the token for authentication
 * checks if the webservice returns data or error 
 * error condition: the room may not have been created etc
 * returns an array with 'value' = error or message
 * 'message' = reason for error
 * 'chatdata' => if everything is valid 
 */
function _hipchat_archive_getdatawebservice($link,$room_id,$date,$time_zone,$format,$authToken){
    $dataSend = array();
    //make the http request
    $dataWebService = drupal_http_request($link.$room_id.'&date='.$date.'&timezone='.$time_zone.'&format='.$format.$authToken);
    $arr = (array)$dataWebService;
    //check the key if error or message
    $arrKey = key((array)json_decode(current((array)$arr['data'])));
    //get the value for the key 'error'
    $arrValue = (array)json_decode(current((array)$arr['data'])); 
    //if key is 'error' then retrieve the error message
    if ($arrKey === 'error'){
       $arrVal = (array)$arrValue['error'];
       $arrValMessage = $arrVal['message']. ' Returning data for today';
     }
    if ($arrKey === 'error'){
        $dataSend[] = array(
          'value' => $arrKey,
          'message' => $arrValMessage,
          'chatdata' => ''		
          );
     } else {
         $dataSend[] = array(
           'value' => $arrKey,
           'chatdata' => $dataWebService, 
         );
    }
    //return the combined array
    return $dataSend; 
}

/**
 * hipchat_archive_cron
 * saves data for the previous day into the db
 */
function hipchat_archive_cron(){
   //yesterday's date, link, authorization token, time_zone and format
   $prevDate = date('Y-m-d', strtotime('- 1 day'));
   $link = 'https://api.hipchat.com/v1/rooms/history?room_id=';
   $authToken = '&auth_token='.variable_get('chat_room_token');
   $time_zone = 'America/New_York';
   $format = 'json';
   //get room_id
   $room_id = variable_get('chat_room_id');
   
   //get data from webservice
   $prevDayData = getDataFromWebService($link,$room_id,$prevDate,$time_zone,$format,$authToken);
   $chatData = (array)$prevDayData[0]['chatdata'];
   if ($prevDayData[0]['value'] === 'messages'){
         $prevDayDataValue = drupal_json_decode($chatData['data']);
         $saveChatData[] = array('cdate' => $prevDate,'cdata' => $prevDayDataValue);
         //save to the db
         $saved = hipchat_save_data($saveChatData); 
      }
  }

/**
 * _hipchat_archive_format_data
 * parameter = $date,$nextDate,$data,$room_id,$prevDate
 * formats the data and returns the data in a table format
 * $nextDate are used for creating links
 * $date is used for showing the user that the date on a 
 * page is for that date and hence not a link
 * $prevDate used to create the prev link
 * $data is the chat history for the date selected
 * $roomid for the creating the url
 */
function _hipchat_archive_format_data($date,$nextDate,$data,$room_id,$prevDate){
    //variable declaration
    $rows = array();
    $links = array();
    //get the created links
    $links = _hipchat_archive_build_links($prevDate, $room_id,$nextDate,$date);

      //create the header for the table
    $header = array('From','Message','Date');
   
    if ($data){ 
      $getData = $data['cdata'];
      if (is_array($getData)){
       $result = $getData['messages'];
        }
      else {
       $result = drupal_json_decode($getData);
      }
    //put data into rows
     if ($result){
       $rows = _hipchat_archive_get_rows($result,$date,$room_id);
      } else {
        drupal_set_message(t('No data available for the selected date.'));
      }
    }
 
  //return formatted output
  return _hipchat_archive_get_build($links,$date,$header,$rows);
}

/**
 * _hipchat_archive_build_links
 * parameter = $prevDate, $room_id,$nextDate,$date
 * creates and returns the links for prev and next day
 */
function _hipchat_archive_build_links($prevDate,$room_id,$nextDate,$date){
    $prevLink = l(t($prevDate), 'hipchat-archive/'.$prevDate.'/'.$room_id);
    $nextLink = l(t($nextDate), 'hipchat-archive/'.$nextDate.'/'.$room_id);
   
    return $links[] = array (
            'prevlink' => $prevLink,
            'nextlink' => $nextLink,
          );
}

/**
 * _hipchat_archive_get_build
 * parameter = $links,$date,$header,$rows
 * creates and returns the table created with
 * headers and rows
 */
function _hipchat_archive_get_build($links,$date,$header,$rows){
  $build['links'] = array(
   '#markup' => '<p id="prevlink">'.$links['prevlink'].'<span id="todaylink">' .$date.'<span id="nextlink">'.$links['nextlink'].'</p>',
   '#attached' => array ('css' => array (drupal_get_path('module', 'hipchat_archive') . '/hipchat_archive.css' ,) )
        );
 
   $build['data'] =  array('#theme' => 'table', '#header' => $header, '#rows' => $rows);

   return $build;
 }

/**
 * _hipchat_archive_get_rows
 * parameter = $result
 * creates and returns the rows with
 * data for a particular date
 */
function _hipchat_archive_get_rows($result,$date,$room_id){
   foreach($result as $key => $data) {
     $user = $data['from']['name'];
     if (isset($result[$key - 1])) {
       $pre_user = $result[$key - 1]['from']['name'];
       } else {
        $pre_user = '';
       }
   
     if ($user == $pre_user) {
       $user = '';
     } else {
        $user = '<div id='.$key.'>'.$user.'<a href=#'.$key.'></a></div>';	
         }	 
     $rows[] = array(
        $user,
        $data['message'],
        $data['date'],
       ); 
     }
    return $rows;
}